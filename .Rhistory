par(mfrow = c(2, 2))
hist(dat_unif_1)
hist(dat_unif_2)
plot(dat_unif_3)
boxplot(dat_unif_4)
set.seed(1)
dat_unif_1 = runif(n = 111, min = 0, max = 4)
set.seed(1)
dat_unif_2 = runif(n = 111, min = 0, max = 4)
set.seed(1)
dat_unif_3= runif(n= 111, min= 0, max = 4)
set.seed(1)
dat_unif_4= runif(n= 111, min= 0, max = 4)
par(mfrow = c(2, 2))
hist(dat_unif_1)
hist(dat_unif_2)
plot(dat_unif_3, xlab= "x", ylab= "y")
plot(dat_unif_4, xlab= "x", ylab= "y")
# How many points?
n = 1000
# Create a vector of x-values from -4 to 4:
x = seq(from = -6, to = 6, length.out = n)
# Create the corresponding y-values:
y = dnorm(x, mean = 0, sd = 1)
# plot!
plot(y ~ x, type = "l", ylab = "Probability Density")
y_2 = dnorm(x, mean = 0, sd = 2)
plot(y ~ x, type = "l", ylab = "Probability Density")
points(y_2 ~ x, type = "l", lty  = 2)
plot(y ~ x, type = "l", ylab = "Probability Density")
y_2 = dnorm(x, mean = 0, sd = 2)
y_3 = dnorm(x, mean = -2, sd = 1)
plot(y ~ x, type = "l", ylab = "Probability Density")
points(y_2 ~ x, type = "l", lty  = 2)
points(y_3~ x, type = "l", lty  = 2)
y_cdf_1 = pnorm(x, mean = 0, sd = 1)
plot(y_cdf_1 ~ x, type = "l", ylab = "cumulative density")
y_cdf_1 = pnorm(x, mean = 0, sd = 1)
plot(y_cdf_1 ~ x, type = "l", ylab = "cumulative density")
y_cdf_2 = pnorm(x, mean = 0, sd = 2)
plot(y_cdf_1 ~ x, type = "l", ylab = "Cumulative Density")
points(y_cdf_2 ~ x, type = "l", lty = 2)
y_cdf_1 = pnorm(x, mean = 0, sd = 1)
plot(y_cdf_1 ~ x, type = "l", ylab = "cumulative density")
y_cdf_2 = pnorm(x, mean = 0, sd = 2)
plot(y_cdf_1 ~ x, type = "l", ylab = "Cumulative Density")
y_cdf_3 = pnorm(x, mean = -2, sd = 1)
points(y_cdf_2 ~ x, type = "l", lty = 2)
points(y_cdf_3 ~ x, type = "l", lty = 2)
plot(y ~ x, type = "l", ylab = "Probability Density")
y_2 = dnorm(x, mean = 0, sd = 2)
y_3 = dnorm(x, mean = -2, sd = 1)
plot(y ~ x, type = "l", ylab = "Probability Density")
points(y_2 ~ x, type = "l", lty  = 2)
points(y_3~ x, type = "l", lty  = 2)
y_cdf_1 = pnorm(x, mean = 0, sd = 1)
plot(y_cdf_1 ~ x, type = "l", ylab = "cumulative density")
y_cdf_2 = pnorm(x, mean = 0, sd = 2)
plot(y_cdf_1 ~ x, type = "l", ylab = "Cumulative Density")
points(y_cdf_2 ~ x, type = "l", lty = 2)
y_cdf_3 = pnorm(x, mean = -2, sd = 1)
points(y_cdf_3 ~ x, type = "l", lty = 2)
par(mfrow = c(1, 2))
# How many points?
n = 1000
# Create a vector of x-values from -4 to 4:
x = seq(from = -6, to = 6, length.out = n)
# Create the corresponding y-values:
y = dnorm(x, mean = 0, sd = 1)
# plot!
plot(y ~ x, type = "l", ylab = "Probability Density")
y_2 = dnorm(x, mean = 0, sd = 2)
y_3 = dnorm(x, mean = -2, sd = 1)
plot(y ~ x, type = "l", ylab = "Probability Density")
points(y_2 ~ x, type = "l", lty  = 2)
points(y_3~ x, type = "l", lty  = 2)
y_cdf_1 = pnorm(x, mean = 0, sd = 1)
plot(y_cdf_1 ~ x, type = "l", ylab = "cumulative density")
y_cdf_2 = pnorm(x, mean = 0, sd = 2)
plot(y_cdf_1 ~ x, type = "l", ylab = "Cumulative Density")
points(y_cdf_2 ~ x, type = "l", lty = 2)
y_cdf_3 = pnorm(x, mean = -2, sd = 1)
points(y_cdf_3 ~ x, type = "l", lty = 2)
par(mfrow = c(1, 2))
plot(y ~ x, type = "l", ylab = "Probability Density")
y_2 = dnorm(x, mean = 0, sd = 2)
y_3 = dnorm(x, mean = -2, sd = 1)
plot(y ~ x, type = "l", ylab = "Probability Density")
points(y_2 ~ x, type = "l", lty  = 2)
points(y_3~ x, type = "l", lty  = 2)
plot(y ~ x, type = "l", ylab = "Probability Density")
y_2 = dnorm(x, mean = 0, sd = 2)
y_3 = dnorm(x, mean = -2, sd = 1)
plot(y ~ x, type = "l", ylab = "Probability Density")
points(y_2 ~ x, type = "l", lty  = 2)
points(y_3~ x, type = "l", lty  = 2)
y_cdf_1 = pnorm(x, mean = 0, sd = 1)
plot(y_cdf_1 ~ x, type = "l", ylab = "cumulative density")
y_cdf_2 = pnorm(x, mean = 0, sd = 2)
plot(y_cdf_1 ~ x, type = "l", ylab = "Cumulative Density")
points(y_cdf_2 ~ x, type = "l", lty = 2)
y_cdf_3 = pnorm(x, mean = -2, sd = 1)
points(y_cdf_3 ~ x, type = "l", lty = 2)
par(mfrow = c(1, 2))
plot(y ~ x, type = "l", ylab = "Probability Density")
y_2 = dnorm(x, mean = 0, sd = 2)
y_3 = dnorm(x, mean = -2, sd = 1)
plot(y ~ x, type = "l", ylab = "Probability Density")
points(y_2 ~ x, type = "l", lty  = 2)
points(y_3~ x, type = "l", lty  = 2)
y_cdf_1 = pnorm(x, mean = 0, sd = 1)
plot(y_cdf_1 ~ x, type = "l", ylab = "cumulative density")
y_cdf_2 = pnorm(x, mean = 0, sd = 2)
plot(y_cdf_1 ~ x, type = "l", ylab = "Cumulative Density")
points(y_cdf_2 ~ x, type = "l", lty = 2)
y_cdf_3 = pnorm(x, mean = -2, sd = 1)
points(y_cdf_3 ~ x, type = "l", lty = 2)
# plot!
par(mfrow = c(1, 2))
y_2 = dnorm(x, mean = 0, sd = 2)
y_3 = dnorm(x, mean = -2, sd = 1)
plot(y ~ x, type = "l", ylab = "Probability Density")
points(y_2 ~ x, type = "l", lty  = 2)
points(y_3~ x, type = "l", lty  = 2)
y_cdf_1 = pnorm(x, mean = 0, sd = 1)
y_cdf_2 = pnorm(x, mean = 0, sd = 2)
plot(y_cdf_1 ~ x, type = "l", ylab = "Cumulative Density")
points(y_cdf_2 ~ x, type = "l", lty = 2)
y_cdf_3 = pnorm(x, mean = -2, sd = 1)
points(y_cdf_3 ~ x, type = "l", lty = 2)
# Function template
sse_mean = function(x)
{
sd(x, na.rm= TRUE)/sqrt(length(x))
# ... your code here ...
return(sse)
}
require(palmerpenguins)
require(mtcars)
rm(list = ls())
# Function template
sse_mean = function(x)
{
sd(x, na.rm= TRUE)/sqrt(length(x))
# ... your code here ...
return(sse)
}
sse_mean(penguins$body_mass_g)
rm(list = ls())
# Function template
sse_mean = function(x)
{
sd(x, na.rm= TRUE)/sqrt(length(x))
# ... your code here ...
return(sse_mean)
}
sse_mean(penguins$body_mass_g)
rm(list = ls())
# Function template
sse_mean = function(x)
{
sd(x, na.rm= TRUE)/sqrt(length(x))
# ... your code here ...
}
sse_mean(penguins$body_mass_g)
sse_mean(mtcars$mpg)
two_group_resample_diff = function(x, n_1, n_2)
{
dat_1 = sample(x, n_1, replace = TRUE)
dat_2 = sample(x, n_2, replace = TRUE)
difference_in_means =
mean(dat_1, na.rm = TRUE) - mean(dat_2, na.rm = TRUE)
# ... your code here ...
return(difference_in_means)
}
set.seed(54321)
two_group_resample_diff(dat_pen$flipper_length_mm, 68, 152)
dat_pen = droplevels(subset(penguins, species != "Gentoo"))
set.seed(54321)
two_group_resample_diff(dat_pen$flipper_length_mm, 68, 152)
set.seed(54321)
two_group_resample_diff(dat_pen$flipper_length_mm, 68, 152)
set.seed(54321)
two_group_resample_diff(dat_pen$flipper_length_mm, 68, 152)
n = 2000
mean_differences = c()
for (i in 1:n)
{
mean_differences = c(
mean_differences,
two_group_resample_diff(dat_pen$flipper_length_mm, 68, 152)
)
}
hist(mean_differences)
sum(abs(mean_differences) > 5.8
exp_fun = function(x, a, b)
{
return(a * x * exp(-b * x))
}
curve(
exp_fun(x, 2.2, 1/15), add = FALSE, from = 0, to = 50,
ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
exp_fun = function(x, a, b)
{
return(a *exp(-b * x))
}
curve(
exp_fun(x, 2.2, 1/15), add = FALSE, from = 0, to = 50,
ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
curve(
exp_fun(x, 1.9, 0.1), add = FALSE, from = 0, to = 50, ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
)
curve(
exp_fun(x, 1.9, 0.1), add = FALSE, from = 0, to = 50, ann = FALSE, axes = TRUE, ylab = "f(x)"; box()
curve(
exp_fun(x, 1.9, 0.1), add = FALSE, from = 0, to = 50, ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
)
curve(
exp_fun(x, 2.2, 1/15), add = FALSE, from = 0, to = 50,
ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
curve(
exp_fun(x, 1.9, 0.1), add = FALSE, from = 0, to = 50, ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
)
curve(
exp_fun(x, 1.9, 0.1), lty = dotted add = FALSE, from = 0, to = 50, ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
curve(
exp_fun(x, 1.9, 0.1), lty = dotted, add = FALSE, from = 0, to = 50, ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
curve(
exp_fun(x, 1.9, 0.1), lty = "dotted", add = FALSE, from = 0, to = 50, ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
curve(
exp_fun(x, 1.9, 0.1), add = FALSE, from = 0, to = 50, ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
)
curve(
exp_fun(x, 2.2, 1/15), add = FALSE, from = 0, to = 50,
ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
curve(
exp_fun(x, 1.9, 0.1), add = FALSE, from = 0, to = 50, ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
)
curve(
exp_fun(x, 1.9, 0.1), add = FALSE, from = 0, to = 50, ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
exp_fun(x, 1.9, 0.3), lty = "dotted", add = FALSE, from = 0, to = 50, ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
curve(
exp_fun(x, 1.9, 0.1), add = FALSE, from = 0, to = 50, ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
exp_fun(x, 1.9, 0.3), lty = "dotted", add = FALSE, from = 0, to = 50, ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
curve(exp_fun(x, 1.9, 0.1), add = FALSE, from = 0, to = 50, ann = FALSE, axes = TRUE, ylab = "f(x)"); box())
curve(exp_fun(x, 1.9, 0.1), add = FALSE, from = 0, to = 50, ann = FALSE, axes = TRUE, ylab = "f(x)"); box())
curve(exp_fun(x, 1.9, 0.1), add = FALSE, from = 0, to = 50, ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
curve(exp_fun(x, 1.9, 0.3), lty = "dotted", add = FALSE, from = 0, to = 50, ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
curve(exp_fun(x, 1.9, 0.1), add = FALSE, from = 0, to = 50, ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
curve(exp_fun(x, 1.9, 0.3), lty = "dotted", add = FALSE, from = 0, to = 50, ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
curve(exp_fun(x, 1.2, 0.2), col= "red", add = FALSE, from = 0, to = 50, ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
curve(exp_fun(x, 1.2, 0.4), col= "red", lty = "dotted", add = FALSE, from = 0, to = 50, ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
curve(exp_fun(x, 1.9, 0.1), add = FALSE, from = 0, to = 50, ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
curve(exp_fun(x, 1.9, 0.3), lty = "dotted", add = FALSE, from = 0, to = 50, ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
curve(exp_fun(x, 1.2, 0.2), col= "red", add = FALSE, from = 0, to = 50, ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
curve(exp_fun(x, 1.2, 0.4), col= "red", lty = "dotted", add = FALSE, from = 0, to = 50, ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
curve(exp_fun(x, 1.9, 0.1), add = TRUE, from = 0, to = 50, ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
curve(exp_fun(x, 1.9, 0.3), lty = "dotted", add = TRUE, from = 0, to = 50, ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
curve(exp_fun(x, 1.2, 0.2), col= "red", add = TRUE, from = 0, to = 50, ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
curve(exp_fun(x, 1.2, 0.4), col= "red", lty = "dotted", add = TRUE, from = 0, to = 50, ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
ricker_fun = function(x, a, b)
{
return(a * x * exp(-b * x))
}
curve(ricker_fun(x, 25, 0.2), from = 0, to = 5,
add = TRUE, ylab = "f(x)", xlab = "x"))
curve(ricker_fun(x, 25, 0.2), from = 0, to = 5,
add = TRUE, ylab = "f(x)", xlab = "x")
curve(ricker_fun(x, 25, 0.2), from = 0, to = 5,
add = TRUE, ylab = "f(x)", xlab = "x")
curve(ricker_fun(x, 25, 0.2), from = 0, to = 50,
add = TRUE, ylab = "f(x)", xlab = "x")
curve(ricker_fun(x, 25, 0.2), from = 0, to = 50,
add = TRUE, ylab = "f(x)", xlab = "x")
curve(ricker_fun(x, 20, 0.2), lty= "dotted", from = 0, to = 50,
add = TRUE, ylab = "f(x)", xlab = "x")
curve(ricker_fun(x, 10, 0.2), lty= "dotted", from = 0, to = 50,
add = TRUE, ylab = "f(x)", xlab = "x")
curve(ricker_fun(x, 75, 0.3), col= "red", from = 0, to = 50,
add = TRUE, ylab = "f(x)", xlab = "x")
curve(ricker_fun(x, 75, 0.3), ylim = 100, col= "red", from = 0, to = 50,
add = TRUE, ylab = "f(x)", xlab = "x")
curve(ricker_fun(x, 75, 0.3), ylim = 100, col= "red", from = 0, to = 50,
add = TRUE, ylab = "f(x)", xlab = "x")
curve(ricker_fun(x, 75, 0.3), ylim = 75, col= "red", from = 0, to = 50,
add = TRUE, ylab = "f(x)", xlab = "x")
curve(ricker_fun(x, 75, 0.3), ylim = 50, col= "red", from = 0, to = 50,
add = TRUE, ylab = "f(x)", xlab = "x")
curve(ricker_fun(x, 75, 0.3), ylim= 200, col= "red", from = 0, to = 50,
add = TRUE, ylab = "f(x)", xlab = "x")
curve(ricker_fun(x, 75, 0.3), ylim= 5, col= "red", from = 0, to = 50,
add = TRUE, ylab = "f(x)", xlab = "x")
curve(ricker_fun(x, 75, 0.3), xlim=100, col= "red", from = 0, to = 50,
add = TRUE, ylab = "f(x)", xlab = "x")
curve(ricker_fun(x, 75, 0.3), col= "red", from = 0, to = 50,
add = TRUE, ylab = "f(x)", xlab = "x")
curve(ricker_fun(x, 75, 0.3), col= "red", from = 0, to = 50,
add = TRUE, ylab = "f(x)", xlab = "x")
curve(ricker_fun(x, 25, 0.2), from = 0, to = 50,
add = TRUE, ylab = "f(x)", xlab = "x")
curve(ricker_fun(x, 20, 0.2), lty= "dotted", from = 0, to = 50,
add = TRUE, ylab = "f(x)", xlab = "x")
curve(ricker_fun(x, 10, 0.2), lty= "dotted", from = 0, to = 50,
add = TRUE, ylab = "f(x)", xlab = "x")
curve(ricker_fun(x, 50, 0.3), col= "red", lty= "dotted", from = 0, to = 50,
add = TRUE, ylab = "f(x)", xlab = "x")
curve(ricker_fun(x, 40, 0.3), col= "red", lty= "dotted", from = 0, to = 50,
add = TRUE, ylab = "f(x)", xlab = "x")
curve(ricker_fun(x, 20, 0.4), from = 0, to = 50,
add = TRUE, ylab = "f(x)", xlab = "x")
curve(ricker_fun(x, 20, 0.2), lty= "dotted", from = 0, to = 50,
add = TRUE, ylab = "f(x)", xlab = "x")
curve(ricker_fun(x, 20, 0.2), lty= "dotted", from = 0, to = 50,
add = TRUE, ylab = "f(x)", xlab = "x")
curve(ricker_fun(x, 20, 0.4), from = 0, to = 50,
add = TRUE, ylab = "f(x)", xlab = "x")
dispersal <- read.csv("~/environmental_data/data/dispersal.csv")
View(dispersal)
plot(
dat_dispersal$dist.class,
dat_dispersal$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders\n linear model")
plot(
dispersal$dist.class,
dispersal$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders\n linear model")
curve(line_point_slope(x, 750, 0.3, -0.5), add = FALSE)
line_point_slope = function(x, x1, y1, slope)
{
get_y_intercept =
function(x1, y1, slope)
return(-(x1 * slope) + y1)
linear =
function(x, yint, slope)
return(yint + x * slope)
return(linear(x, get_y_intercept(x1, y1, slope), slope))
}
plot(
dispersal$dist.class,
dispersal$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders\n linear model")
curve(line_point_slope(x, 750, 0.3, -0.5), add = FALSE)
plot(
dispersal$dist.class,
dispersal$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders\n linear model")
curve(line_point_slope(x, 750, 0.3, -0.5), add = TRUE)
curve(line_point_slope(x, 750, 0.3, -5), add = TRUE)
curve(line_point_slope(x, 750, 0.3, -0.005), add = TRUE)
plot(
dispersal$dist.class,
dispersal$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders\n linear model")
curve(line_point_slope(x, 750, 0.3, -0.005), add = TRUE)
yes
veg = read.csv(here("environmental data", "vegdata.csv"))
require(here)
veg = read.csv(here("environmental data", "vegdata.csv"))
veg = read.csv(here("environmental data", "data", "vegdata.csv"))
veg = read.csv(here("environmental_data", "data", "vegdata.csv"))
veg = read.csv(here("environmental_data", "vegdata.csv"))
veg = read.csv(here("environmental_data", "vegdata.csv")
veg = read.csv(here("environmental_data", "vegdata.csv"))
veg = read.csv(here("environmental_data", "vegdata.csv"))
vegdata <- read.csv("~/environmental_data/data/vegdata.csv")
View(vegdata)
veg<- read.csv("~/environmental_data/data/vegdata.csv")
dat_tree = droplevels(subset(veg, treatment %in% c("control", "clipped")))
View(dat_tree)
wilcox.test(pine ~ treatment, data = dat_tree, alternative = "less")
tree_boot = two.boot(clipped$pine, control$pine, mean, R= 1000, na.rm= TRUE)
install.packages("simpleboot")
require(simpleboot)
tree_boot = two.boot(clipped$pine, control$pine, mean, R= 1000, na.rm= TRUE)
View(dat_tree)
control= droplevels(subset(dat_tree, treatment == 'control'))
View(control)
clipped= droplevels(subset(dat_tree, treament == 'clipped'))
clipped= droplevels(subset(dat_tree, treatment == 'clipped'))
tree_boot = two.boot(clipped$pine, control$pine, mean, R= 1000, na.rm= TRUE)
tree_boot$t
View(tree_boot)
boot.ci(tree_boot)
load.packages("boot.ci")
install.packages(boot.ci)
install.packages("boot.ci")
boot.ci(tree_boot)
boot.ci(tree_boot)
require(boot.ci)
boot.ci(tree_boot)
require(here(boot.ci))
boot.ci(tree_boot)
require("boot.ci")
require(boot.ci)
install.packages("boot.ci")
require(boot.ci)
boot.ci(tree_boot)
boot.ci(boot.out = tree_boot)
library(boot)
boot.ci(tree_boot)
tree_boot = two.boot(clipped$pine, control$pine, mean, R= 10000, na.rm= TRUE)
boot.ci(tree_boot)
quantile(tree_boot$t, c(0.025, 0.975))
bird.sub <- read.csv("~/environmental_data/data/bird.sub.csv")
View(bird.sub)
bird.sub= dat_bird
dat_bird= bird.sub
hab.sub <- read.csv("~/environmental_data/data/hab.sub.csv")
View(hab.sub)
dat_habitat= hab.sub
dat_all = merge(
dat_bird,
dat_habitat,
by = c("basin", "sub"))
head(dat_all[, c("b.sidi", "s.sidi")])
# Calculate the sample mean and sd:
b_sidi_mean = mean(dat_all$b.sidi, na.rm = TRUE)
b_sidi_sd   = sd(dat_all$b.sidi, na.rm = TRUE)
# Use the subset-by-name symbol ($) to create a
# new column of z-standardized values.
dat_all$b.sidi.standardized = (dat_all$b.sidi - b_sidi_mean)/b_sidi_sd
# Calculate the sample mean and sd:
s_sidi_mean = mean(dat_all$s.sidi, na.rm = TRUE)
s_sidi_sd   = sd(dat_all$s.sidi, na.rm = TRUE)
# Use the subset-by-name symbol ($) to create a
# new column of z-standardized values.
dat_all$s.sidi.standardized = (dat_all$s.sidi - s_sidi_mean)/s_sidi_sd
for(i in 1:m)
{
index_1 = sample(nrow(dat_1), replace = TRUE)
index_2 = sample(nrow(dat_1), replace = TRUE)
dat_resampled_i =
data.frame(
b.sidi = dat_1$b.sidi[index_1],
s.sidi = dat_1$s.sidi[index_2]
)
fit_resampled_i = lm(b.sidi ~ s.sidi, data = dat_resampled_i)
slope_resampled_i = coef(fit_resampled_i)[2]
print(slope_resampled_i)
# ... your loop code ...
result_mc[i] = coef(fit_resampled_i)[2]
}
m = 10000
result_mc = numeric(m)
for(i in 1:m)
{
index_1 = sample(nrow(dat_1), replace = TRUE)
index_2 = sample(nrow(dat_1), replace = TRUE)
dat_resampled_i =
data.frame(
b.sidi = dat_1$b.sidi[index_1],
s.sidi = dat_1$s.sidi[index_2]
)
fit_resampled_i = lm(b.sidi ~ s.sidi, data = dat_resampled_i)
slope_resampled_i = coef(fit_resampled_i)[2]
print(slope_resampled_i)
# ... your loop code ...
result_mc[i] = coef(fit_resampled_i)[2]
}
dat_1 =
subset(
dat_all,
select = c(b.sidi, s.sidi))
for(i in 1:m)
{
index_1 = sample(nrow(dat_1), replace = TRUE)
index_2 = sample(nrow(dat_1), replace = TRUE)
dat_resampled_i =
data.frame(
b.sidi = dat_1$b.sidi[index_1],
s.sidi = dat_1$s.sidi[index_2]
)
fit_resampled_i = lm(b.sidi ~ s.sidi, data = dat_resampled_i)
slope_resampled_i = coef(fit_resampled_i)[2]
print(slope_resampled_i)
# ... your loop code ...
result_mc[i] = coef(fit_resampled_i)[2]
}
hist(
result_mc,
main = "Julian's Null Distribution of Regression Slope",
xlab = "Slope Parameter")
abline(v = slope_observed, lty = 2, col = "red", lwd = 2)
hist(
result_mc,
main = "Julian's Null Distribution of Regression Slope",
xlab = "Slope Parameter")
abline(v = slope_observed, lty = 2, col = "red", lwd = 2)
fit_1 = lm(b.sidi ~ s.sidi, data = dat_all)
coef(fit_1)
slope_observed = coef(fit_1)[2]
hist(
result_mc,
main = "Julian's Null Distribution of Regression Slope",
xlab = "Slope Parameter")
abline(v = slope_observed, lty = 2, col = "red", lwd = 2)
quantile(result_mc, c(.05))
