main= "GCKI Presence/Absence vs Percent Slope",
xlab = "Percent Slope",
ylab = "HEWA presence/absence",
pch = 16, cex = 1, col = rbg(0,0,1, alpha= 0.05)
)
par(mfrow = c(2, 1))
# Presence/absence data, translucent points:
plot(
GCKI_pres ~ slope, data = dat_all, yaxt= "n",
main= "GCKI Presence/Absence vs Percent Slope",
xlab = "Percent Slope",
ylab = "HEWA presence/absence",
pch = 16, cex = 1, col = rgb(0,0,1, alpha= 0.05)
)
par(mfrow = c(2, 1))
# Presence/absence data, translucent points:
plot(
GCKI_pres ~ slope, data = dat_all, yaxt= "n",
main= "GCKI Presence/Absence vs Percent Slope",
xlab = "Percent Slope",
ylab = "HEWA presence/absence",
pch = 16, cex = 1, col = rgb(0,0,1, alpha= 0.05)
)
lines(gcki_predicted ~ slope, data = slope_newdata)
View(slope_newdata)
View(ba_newdata)
n = 500
slope_newdata = data.frame(
slope = seq(
from = min(dat_all$slope, na.rm = T),
to = max(dat_all$slope, na.rm = T),
length.out = n
)
)
ba_newdata = data.frame(ba_tot = seq(from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n))
slope_newdata$gcki_predicted = predict(fit_gcki_slope, newdata = slope_newdata, type = "response")
n = 500
slope_newdata = data.frame(
slope = seq(
from = min(dat_all$slope, na.rm = T),
to = max(dat_all$slope, na.rm = T),
length.out = n
)
)
ba_newdata = data.frame(ba_tot = seq(from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n))
slope_newdata$gcki_predicted = predict(fit_gcki_slope, newdata = slope_newdata, type = "response")
slope_newdata$gcki_predicted = predict(fit_gcki_slope, newdata = slope_newdata, type = "response")
fit_gcki_slope = glm(GCKI_pres ~ slope, data = dat_all, family = binomial)
fit_gcki_ba_tot = glm(GCKI_pres ~ ba.tot, data = dat_all, family = binomial)
fit_gcki_both_additive = glm(GCKI_pres ~ slope + ba.tot, data = dat_all, family = binomial)
fit_gcki_both_interactive = glm(GCKI_pres ~ slope * ba.tot, data = dat_all, family = binomial)
slope_newdata$gcki_predicted = predict(fit_gcki_slope, newdata = slope_newdata, type = "response")
ba_newdata$gcki_predicted =
predict(
fit_gcki_ba_tot,
newdata = ba_newdata,
type = "response"
)
ba_newdata$gcki_predicted = predict(fit_gcki_ba_tot, newdata = ba_newdata, type = "response")
fit_gcki_batot = glm(GCKI_pres ~ ba.tot, data = dat_all, family = binomial)
ba_newdata$gcki_predicted = predict(fit_gcki_batot, newdata = ba_newdata, type = "response")
View(ba_newdata)
fit_gcki_ba_tot = glm(GCKI_pres ~ ba_tot, data = dat_all, family = binomial)
fit_gcki_ba_tot = glm(GCKI_pres ~ ba.tot, data = dat_all, family = binomial)
ba_newdata$gcki_predicted = predict(fit_gcki_ba_tot, newdata = ba_newdata, type = "response")
ba_newdata = data.frame(ba.tot = seq(from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n))
ba_newdata$gcki_predicted = predict(fit_gcki_ba_tot, newdata = ba_newdata, type = "response")
par(mfrow = c(2, 1))
# Presence/absence data, translucent points:
plot(
GCKI_pres ~ slope, data = dat_all, yaxt= "n",
main= "GCKI Presence/Absence vs Percent Slope",
xlab = "Percent Slope",
ylab = "HEWA presence/absence",
pch = 16, cex = 1, col = rgb(0,0,1, alpha= 0.05)
)
par(mfrow = c(2, 1))
# Presence/absence data, translucent points:
plot(
GCKI_pres ~ slope, data = dat_all, yaxt= "n",
main= "GCKI Presence/Absence vs Percent Slope",
xlab = "Percent Slope",
ylab = "HEWA presence/absence",
pch = 16, cex = 1, col = rgb(0,0,1, alpha= 0.05)
)
lines(gcki_predicted ~ slope, data = slope_newdata)
axis(2, at = c(0,1), las= 1, labels= c("Absent", "Present"))
plot(
GCKI_pres ~ ba.tot, data = dat_all, yaxt= "n",
main="GCKI Presence/Absence vs Basal Area",
xlab = "Basal Area",
ylab = "",
ylim= c(-0.25, 1.25)
pch = 16, cex = 1, col = rgb(0,0,1, alpha= 0.05))
par(mfrow = c(2, 1))
# Presence/absence data, translucent points:
plot(
GCKI_pres ~ slope, data = dat_all, yaxt= "n",
main= "GCKI Presence/Absence vs Percent Slope",
xlab = "Percent Slope",
ylab = "HEWA presence/absence",
pch = 16, cex = 1, col = rgb(0,0,1, alpha= 0.05)
)
lines(gcki_predicted ~ slope, data = slope_newdata)
axis(2, at = c(0,1), las= 1, labels= c("Absent", "Present"))
plot(
GCKI_pres ~ ba.tot, data = dat_all, yaxt= "n",
main="GCKI Presence/Absence vs Basal Area",
xlab = "Basal Area",
ylab = "",
ylim= c(-0.25, 1.25),
pch = 16, cex = 1, col = rgb(0,0,1, alpha= 0.05))
lines(gcki_predicted ~ ba.tot, data = ba_newdata)
axis(2, at c(0,1), las= 1, labels= c("Absent", "Present"))
axis(2, at = c(0, 1), las= 1, labels= c("Absent", "Present"))
par(mfrow = c(2, 1))
# Presence/absence data, translucent points:
plot(
GCKI_pres ~ slope, data = dat_all, yaxt= "n",
main= "GCKI Presence/Absence vs Percent Slope",
xlab = "Percent Slope",
ylab = "HEWA presence/absence",
pch = 16, cex = 1, col = rgb(0,0,1, alpha= 0.05)
)
lines(gcki_predicted ~ slope, data = slope_newdata)
axis(2, at = c(0, 1), las= 1, labels= c("Absent", "Present"))
plot(
GCKI_pres ~ ba.tot, data = dat_all, yaxt= "n",
main="GCKI Presence/Absence vs Basal Area",
xlab = "Basal Area",
ylab = "",
ylim= c(-0.25, 1.25),
pch = 16, cex = 1, col = rgb(0,0,1, alpha= 0.05))
lines(gcki_predicted ~ ba.tot, data = ba_newdata)
axis(2, at c(0,1), las= 1, labels= c("Absent", "Present"))
par(mfrow = c(2, 1))
# Presence/absence data, translucent points:
plot(
GCKI_pres ~ slope, data = dat_all, yaxt= "n",
main= "GCKI Presence/Absence vs Percent Slope",
xlab = "Percent Slope",
ylab = "HEWA presence/absence",
pch = 16, cex = 1, col = rgb(0,0,1, alpha= 0.05)
)
lines(gcki_predicted ~ slope, data = slope_newdata)
axis(2, at = c(0, 1), las= 1, labels= c("Absent", "Present"))
plot(
GCKI_pres ~ ba.tot, data = dat_all, yaxt= "n",
main="GCKI Presence/Absence vs Basal Area",
xlab = "Basal Area",
ylab = "",
ylim= c(-0.25, 1.25),
pch = 16, cex = 1, col = rgb(0,0,1, alpha= 0.05))
lines(gcki_predicted ~ ba.tot, data = ba_newdata)
axis(2, at = c(0, 1), las= 1, labels= c("Absent", "Present"))
par(mfrow = c(2, 1))
# Presence/absence data, translucent points:
plot(
GCKI_pres ~ slope, data = dat_all, yaxt= "n",
main= "GCKI Presence/Absence vs Percent Slope",
xlab = "Percent Slope",
ylab = "",
pch = 16, cex = 1, col = rgb(0,0,1, alpha= 0.05)
)
lines(gcki_predicted ~ slope, data = slope_newdata)
axis(2, at = c(0, 1), las= 1, labels= c("Absent", "Present"))
plot(
GCKI_pres ~ ba.tot, data = dat_all, yaxt= "n",
main="GCKI Presence/Absence vs Basal Area",
xlab = "Basal Area",
ylab = "",
ylim= c(-0.25, 1.25),
pch = 16, cex = 1, col = rgb(0,0,1, alpha= 0.05))
lines(gcki_predicted ~ ba.tot, data = ba_newdata)
axis(2, at = c(0, 1), las= 1, labels= c("Absent", "Present"))
n = 50
ba.tot = seq(
from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n)
slope = seq(
from = min(dat_all$slope, na.rm = T),
to = max(dat_all$slope, na.rm = T),
length.out = n)
new_dat_all = expand.grid(
ba.tot = ba.tot,
slope = slope)
head(new_dat_all)
new_dat_all$pred_add = predict(
fit_gcki_both_interactive,
newdata = new_dat_all,
type = "response")
new_dat_all$pred_add = predict(
fit_gcki_both_additive,
newdata = new_dat_all,
type = "response")
View(new_dat_all)
new_dat_all$pred_int= predict(
fit_gcki_both_interactive,
newdata= new_dat_all,
type= "response")
z_gcki_add = matrix(
new_dat_all$pred_add,
nrow = length(ba.tot),
byrow = FALSE)
z_gcki_int = matrix(
new_dat_all$pred_int,
nrow = length(ba.tot),
byrow = FALSE)
par(mfrow = c(1, 2))
contour(
x = ba.tot, y = slope,
z = z_gcki_add,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Additive")
contour(
x = ba.tot,
y = slope,
z = z_gcki_int,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Interactive")
knitr::opts_chunk$set(echo = TRUE)
ginkgo = read.csv(here("data","ginkgo_data_2022.csv"))
matrix_example <- matrix(c(5,10,15, 25,30,35), nrow = 2, ncol = 3, byrow = TRUE,
dimnames = list(c("row_1", "row_2"), c("C_1", "C_2", "C_3")))
View(matrix_example)
matrix_example <- matrix(c(5,10,15, 25,30,35), nrow = 2, ncol = 3, byrow = TRUE,
dimnames = list(c("row_1", "row_2"), c("C_1", "C_2", "C_3")))
View(matrix_example)
data_frame <- data.frame(x1 = 1:10,
x2 = letters[1:10],
x3 = c(5, 10, 15, 20, 25,30,35,40,45,50),
x4 = "more data")
data_frame                             # print the data frame
data_frame
View(data_frame)
data_frame_from_matrix= data.frame(matrix_example)
data_frame_from_matrix
View(data_frame_from_matrix)
nrow(ginkgo)
ncol(ginkgo)
dim(ginkgo)
nrow(ginkgo) # number of rows
ncol(ginkgo) # number of columns
dim(ginkgo) # both number of rows and columns
View(ginkgo)
width_ginkgo= ginkgo$max_width
width_ginkgo
#Select the first row in the ginkgo data.frame
ginkgo[1]
View(ginkgo)
#Select the element in row 2 column 3 of the ginkgo data.frame. Within the brackets, numbers to the left of the comma refer to position within rows and numbers to the right of the comma refer to position within columns
ginkgo[2,3]
#Select the 3rd column of the ginkgo data.frame
ginkgo[ ,3]
#Select the first row in the ginkgo data.frame
ginkgo[1]
#Select the first row in the ginkgo data.frame
ginkgo[1, ]
#Select the 3rd column of the ginkgo data.frame
ginkgo[ ,3]
View(ginkgo)
#Select the 3rd column of the ginkgo data.frame
ginkgo[3]
View(penguins)
View(penguins)
# Subset penguins data frame to retrieve data on Adelie penguins from the species column
adelie_subset= subset(penguins, species==Adelie)
View(penguins)
View(penguins)
# Subset penguins data frame to retrieve data on Adelie penguins from the species column
adelie_subset= subset(penguins, species=Adelie)
View(adelie_subset)
# Subset penguins data frame to retrieve data on Adelie penguins from the species column
adelie_subset= subset(penguins, species==Adelie)
View(penguins)
# Subset penguins data frame to retrieve data on Adelie penguins from the species column
adelie_subset= subset(penguins, species==Chinstrap)
# Subset penguins data frame to retrieve data on Adelie penguins from the species column
adelie_subset= subset(penguins, subset = Adelie)
adelie_subset= subset(penguins, subset = rownames(penguins)== 'Adelie')
View(adelie_subset)
View(penguins)
adelie_subset= subset(penguins, species %in% c("Adelie"))
View(adelie_subset)
summary(penguins)
View(adelie_subset)
mean(adelie_subset$bill_length_mm)
mean(adelie_subset$bill_length_mm, na.rm= TRUE)
# Calculate standard deviation of bill lengths of Adelie penguins using subsetted data.frame
sd(adelie_subset$bill_length_mm, na.rm= TRUE)
# na.rm argument omits missing values
View(ginkgo)
# Scatterplot of max leaf depth and max leaf width from the ginkgo data
plot(ginkgo$max_depth, ginkgo$max_width)
# Scatterplot of max leaf depth and max leaf width from the ginkgo data
plot(ginkgo$max_depth, ginkgo$max_width, col=2)
plot(ginkgo$max_depth, ginkgo$max_width,
col=2,     #col changes point color
pch=19,    #pch changes character type
cex= 3)
# Scatterplot of max leaf depth and max leaf width from the ginkgo data
plot(ginkgo$max_depth, ginkgo$max_width,
col=2,     #col changes point color
pch=19,    #pch changes character type
cex= 0.5)
# Scatterplot of max leaf depth and max leaf width from the ginkgo data
plot(ginkgo$max_depth, ginkgo$max_width,
col=2,     #col changes point color
pch=19,    #pch changes character type
cex= 0.5,   #cex changes point size
main="Ginkgo leaf max depth vs width", #main provides a title for the plot
xlab= "Max leaf depth", #xlab provides a label for the x axis
ylab= "Max leaf width", #ylab provides a label for the y axis
xlim= 100)
plot(ginkgo$max_depth, ginkgo$max_width,
col=2,     #col changes point color
pch=19,    #pch changes character type
cex= 0.5,   #cex changes point size
main="Ginkgo leaf max depth vs width", #main provides a title for the plot
xlab= "Max leaf depth", #xlab provides a label for the x axis
ylab= "Max leaf width", #ylab provides a label for the y axis
xlim= 100
plot(ginkgo$max_depth, ginkgo$max_width,
# Scatterplot of max leaf depth and max leaf width from the ginkgo data
plot(ginkgo$max_depth, ginkgo$max_width,
col=2,     #col changes point color
pch=19,    #pch changes character type
cex= 0.5,   #cex changes point size
main="Ginkgo leaf max depth vs width", #main provides a title for the plot
xlab= "Max leaf depth", #xlab provides a label for the x axis
ylab= "Max leaf width", #ylab provides a label for the y axis
xlim= c(0,100))
# Scatterplot of max leaf depth and max leaf width from the ginkgo data
plot(ginkgo$max_depth, ginkgo$max_width,
col=2,     #col changes point color
pch=19,    #pch changes character type
cex= 0.5,   #cex changes point size
main="Ginkgo leaf max depth vs width", #main provides a title for the plot
xlab= "Max leaf depth", #xlab provides a label for the x axis
ylab= "Max leaf width", #ylab provides a label for the y axis
xlim= c(20,100), #xlim sets x range
ylim= c(30,130) #ylim sets y range)
# Scatterplot of max leaf depth and max leaf width from the ginkgo data
plot(ginkgo$max_depth, ginkgo$max_width,
col=2,     #col changes point color
pch=19,    #pch changes character type
cex= 0.5,   #cex changes point size
main="Ginkgo leaf max depth vs width", #main provides a title for the plot
xlab= "Max leaf depth", #xlab provides a label for the x axis
ylab= "Max leaf width", #ylab provides a label for the y axis
xlim= c(20,100), #xlim sets x range
ylim= c(30,130) #ylim sets y range))
# Scatterplot of max leaf depth and max leaf width from the ginkgo data
plot(ginkgo$max_depth, ginkgo$max_width,
col=2,     #col changes point color
pch=19,    #pch changes character type
cex= 0.5,   #cex changes point size
main="Ginkgo leaf max depth vs width", #main provides a title for the plot
xlab= "Max leaf depth", #xlab provides a label for the x axis
ylab= "Max leaf width", #ylab provides a label for the y axis
xlim= c(20,100), #xlim sets x range)
# Scatterplot of max leaf depth and max leaf width from the ginkgo data
plot(ginkgo$max_depth, ginkgo$max_width,
col=2,     #col changes point color
pch=19,    #pch changes character type
cex= 0.5,   #cex changes point size
main="Ginkgo leaf max depth vs width", #main provides a title for the plot
xlab= "Max leaf depth", #xlab provides a label for the x axis
ylab= "Max leaf width", #ylab provides a label for the y axis
xlim= c(29,100), #xlim sets x range)
plot(ginkgo$max_depth, ginkgo$max_width,
col=2,     #col changes point color
pch=19,    #pch changes character type
cex= 0.5,   #cex changes point size
main="Ginkgo leaf max depth vs width", #main provides a title for the plot
xlab= "Max leaf depth", #xlab provides a label for the x axis
ylab= "Max leaf width", #ylab provides a label for the y axis
xlim= c(20,100), #xlim sets x range
ylim = c(30,130) #ylim sets y range
)
#Create a histogram of penguin flipper lengths using the previously loaded penguins data
hist(penguins$flipper_length_mm)
#Create a histogram of penguin flipper lengths using the previously loaded penguins data
hist(penguins$flipper_length_mm, main= "Histogram of penguin flipper lengths", xlab= "Flipper length (mm)")
#Create a histogram of penguin flipper lengths using the previously loaded penguins data
hist(penguins$flipper_length_mm, main= "Histogram of penguin flipper lengths", xlab= "Flipper length (mm)",
breaks= 8)
#Create a histogram of penguin flipper lengths using the previously loaded penguins data
hist(penguins$flipper_length_mm, main= "Histogram of penguin flipper lengths", xlab= "Flipper length (mm)",
breaks= 10)
#Create a histogram of penguin flipper lengths using the previously loaded penguins data
hist(penguins$flipper_length_mm, main= "Histogram of penguin flipper lengths", xlab= "Flipper length (mm)",
breaks= 9)
#Create a histogram of penguin flipper lengths using the previously loaded penguins data
hist(penguins$flipper_length_mm, main= "Histogram of penguin flipper lengths", xlab= "Flipper length (mm)",
breaks= 9)
#Create a histogram of penguin flipper lengths using the previously loaded penguins data
hist(penguins$flipper_length_mm, main= "Histogram of penguin flipper lengths", xlab= "Flipper length (mm)",
breaks= 8)
#Create a histogram of penguin flipper lengths using the previously loaded penguins data
hist(penguins$flipper_length_mm, main= "Histogram of penguin flipper lengths", xlab= "Flipper length (mm)",
breaks= 8, #breaks argument specifies cell boundaries
)
#boxplot of petiole lengths using ginkgo data
boxplot(ginkgo$petiole_length)
#boxplot of petiole lengths using ginkgo data
boxplot(ginkgo$petiole_length, ylab= "petiole length (mm)", main= "Boxplot of ginkgo leaf petiole lengths")
boxplot(ginkgo$petiole_length~ginkgo$seeds_present)
boxplot(ginkgo$petiole_length~ginkgo$seeds_present, xlab= "Seeds present", ylab= "Petiole length")
boxplot(ginkgo$petiole_length~ginkgo$seeds_present, xlab= "Seeds present", ylab= "Petiole length (mm)")
#boxplot of petiole lengths using ginkgo data
boxplot(ginkgo$petiole_length, ylab= "petiole length (mm)", main= "Boxplot of ginkgo leaf petiole lengths")
#conditional boxplot of petiole length conditioned on the seeds_present column of the ginkgo data
boxplot(ginkgo$petiole_length~ginkgo$seeds_present, xlab= "Seeds present", ylab= "Petiole length (mm)", main= "Conditional boxplot of petiole length conditioned on seed presence")
View(ginkgo)
par(mfrow= c(2,2)) # creates 2X2 matrix of plots
hist(ginkgo$max_width, ylab= "Max width (mm)", main= "Histogram of max ginkgo leaf width")
hist(ginkgo$max_depth, ylab= "Max depth (mm)", main= "Histogram of max ginkgo leaf depth")
hist(ginkgo$notch_depth, ylab= "Notch depth (mm)", main= "Histogam of ginkgo leaf notch depth")
hist(ginkgo$petiole_length, ylab= "Petiole length (mm)", main= "Histogram of ginkgo leaf petiole length")
par(mfrow= c(2,2)) # creates 2X2 matrix of plots
hist(ginkgo$max_width, xlab= "Max width (mm)", main= "Histogram of max ginkgo leaf width")
hist(ginkgo$max_depth, xlab= "Max depth (mm)", main= "Histogram of max ginkgo leaf depth")
hist(ginkgo$notch_depth, xlab= "Notch depth (mm)", main= "Histogam of ginkgo leaf notch depth")
hist(ginkgo$petiole_length, xlab= "Petiole length (mm)", main= "Histogram of ginkgo leaf petiole length")
#Find the value of the normal distribution pdf at x=5, mean=0, sd=1
dnorm(x=5,mean=0,sd=1)
#Find the value of the normal distribution pdf at x=5, mean=0, sd=1
dnorm(x=50,mean=0,sd=1)
#Find the value of the normal distribution pdf at x=5, mean=0, sd=1
dnorm(x=2,mean=0,sd=1)
pnorm(50, mean= 40, sd=2, lower.tail= FALSE #FALSE lower.tail because we want to know the percentage of fish longer than 50mm
)
pnorm(50, mean= 48, sd=2, lower.tail= FALSE #FALSE lower.tail because we want to know the percentage of fish longer than 50mm
)
qnorm(0.75, mean=0, sd=1)
dbinom(x=1:5, size= 10, prob=0.5)
#Calculate the probability of success occurring less than 5 times if the number of trials is 20 and the probability of success is 0.2
pbinom(5, size=20, prob= 0.2)
#Get the binomial quantile for the probability 0.5 if n= 10 and p=0.8
qbinom(p=0.5, size= 10, prob=0.8)
View(delomys)
summary(delomys$body_mass)
summary(delomys$body_length)
shapiro.test(delomys$body_mass)
shapiro.test(delomys$body_length)
plot(delomys$body_mass, delomys$body_length)
plot(delomys$body_length, delomys$body_mass)
plot(delomys$body_length~delomys$body_mass)
plot(delomys$body_length~delomys$body_mass, xlab= "Body mass", ylab= "Body length", main= "Scatterplot of Delomys body mass and body length")
View(delomys)
par(mfrow=c(1,2))
hist(delomys$body_mass, xlab= "Body mass", main= "Histogram of Delomys body mass")
hist(delomys$body_length, xlab= "Body length", main= "Histogram of Delomys body length")
View(delomys)
boxplot(delomys$body_mass~delomys$binomial+delomys$sex)
setwd("~/environmental_data/docs")
setwd("~/environmental_data/docs")
setwd("~/environmental_data/docs")
boxplot(delomys$body_mass~delomys$binomial+delomys$sex, xlab= "Species by sex", ylab= "Body mass", names= c("Delomys dorsalis Female", "Delomys dorsalis Male", "Delomys sublineatus Female", "Delomys Sublineatus Male"))
boxplot(delomys$body_mass~delomys$binomial+delomys$sex, xlab= "Species by sex", ylab= "Body mass", names= c("Delomys dorsalis Female", "Delomys dorsalis Male", "Delomys sublineatus Female", "Delomys Sublineatus Male"))
par(mfrow=c(1,3))
boxplot(delomys$body_mass~delomys$binomial, xlab= "Species", ylab= "Body mass", main= "Boxplot of Delomys body mass conditioned on species")
boxplot(delomys$body_mass~delomys$sex, xlab= "Sex", ylab= "Body mass", main= "Boxplot of Delomys body mass conditioned on sex")
boxplot(delomys$body_mass~delomys$binomial+delomys$sex, xlab= "Species by sex", ylab= "Body mass", names= c("Delomys dorsalis Female", "Delomys dorsalis Male", "Delomys sublineatus Female", "Delomys Sublineatus Male"), main= "Boxplot of delomys body mass conditioned on species and sex")
par(mfrow=c(1,3))
boxplot(delomys$body_mass~delomys$binomial, xlab= "Species", ylab= "Body mass", main= "Boxplot of Delomys body mass by species")
boxplot(delomys$body_mass~delomys$sex, xlab= "Sex", ylab= "Body mass", main= "Boxplot of Delomys body mass by sex")
boxplot(delomys$body_mass~delomys$binomial+delomys$sex, xlab= "Species by sex", ylab= "Body mass", names= c("Delomys dorsalis Female", "Delomys dorsalis Male", "Delomys sublineatus Female", "Delomys Sublineatus Male"), main= "Boxplot of delomys body mass by species and sex")
boxplot(delomys$body_mass~delomys$binomial+delomys$sex, xlab= "Species by sex", ylab= "Body mass", main= "Boxplot of delomys body mass by species and sex")
par(mfrow=c(1,3))
boxplot(delomys$body_mass~delomys$binomial, xlab= "Species", ylab= "Body mass", main= "Boxplot of Delomys body mass by species")
boxplot(delomys$body_mass~delomys$sex, xlab= "Sex", ylab= "Body mass", main= "Boxplot of Delomys body mass by sex")
boxplot(delomys$body_mass~delomys$binomial+delomys$sex, xlab= "Species by sex", ylab= "Body mass", main= "Boxplot of delomys body mass by species and sex")
View(delomys)
DD= subset(delomys, binomial %in% c("Delomys dorsalis"))
DS= subset(delomys, binomial %in% c("Delomys sublineatus"))
boxplot(DD$body_mass~sex)
boxplot(DD$body_mass~DD$sex)
boxplot(DS$body_mass~DS$sex)
par(mfrow=c(1,3))
boxplot(delomys$body_mass~delomys$binomial, xlab= "Species", ylab= "Body mass", main= "Boxplot of Delomys body mass by species")
boxplot(delomys$body_mass~delomys$sex, xlab= "Sex", ylab= "Body mass", main= "Boxplot of Delomys body mass by sex")
boxplot(delomys$body_mass~delomys$binomial+delomys$sex, xlab= "Species by sex", ylab= "Body mass", names= c("dorsalis Female", "sublineatus Female", "dorsalus Male", "sublineatus Male", main= "Boxplot of delomys body mass by species and sex")
boxplot(delomys$body_mass~delomys$binomial+delomys$sex, xlab= "Species by sex", ylab= "Body mass", names= c("dorsalis Female", "sublineatus Female", "dorsalus Male", "sublineatus Male", main= "Boxplot of delomys body mass by species and sex")
boxplot(delomys$body_mass~delomys$binomial+delomys$sex, xlab= "Species by sex", ylab= "Body mass", names= c("dorsalis Female", "sublineatus Female", "dorsalus Male", "sublineatus Male"), main= "Boxplot of delomys body mass by species and sex")
boxplot(delomys$body_mass~delomys$binomial+delomys$sex, xlab= "Species by sex", ylab= "Body mass", names= c("dorsalis Female", "sublineatus Female", "dorsalus Male", "sublineatus Male"), main= "Boxplot of delomys body mass by species and sex")
fit_1= lm(body_length ~ body_mass, data= delomys)
fit_2= lm(body_mass ~ sex, data = delomys)
fit_3= lm(body_mass ~ binomial, data= delomys)
fit_4= lm(body_mass ~ sex + binomial, data= delomys)
fit_5= lm(body_mass ~ sex * binomial, data= delomys)
hist(residuals(fit_1))
hist(residuals(fit_1), breaks= 10)
hist(residuals(fit_1), breaks= 10)
shapiro.test(residuals(fit_1))
shapiro.test(residuals(fit_2))
shapiro.test(residuals(fit_3))
shapiro.test(residuals(fit_3)
shapiro.test(residuals(fit_3))
shapiro.test(residuals(fit_4))
shapiro.test(residuals(fit_5))
knitr::kable(coef(summary(fit_1)))
