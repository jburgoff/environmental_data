
birdhab = merge(bird.sub, hab.sub, by= c("basin", "sub"))
dim(birdhab)
plot(birdhab$ls, birdhab$BRCR)
abline(fit_1)
fit_1=lm(BRCR~ls, data = birdhab)

fit_1_coefs = coefficients(fit_1)
str(fit_1_coefs)

fit_1_summary = summary(fit_1)
str(fit_1_summary)
fit_1_summary$sigma


int_obs= fit_1_coefs[1]
slope_obs= fit_1_coefs[2]
sd_obs= fit_1_summary$sigma




linear = 
  function(x, y_int, slope) 
    return(y_int + x * slope)
linear_simulator=
    function(x, y_int, slope, st_dev)
      return(y_int + x * slope
             + rnorm(length(x), mean= y_int, sd= st_dev))




rnorm(n, mean= x, sd= st_dev)
linear(x = 1, y_int = 1, slope = 1)
linear(x = 3:5, y_int = 1, slope = 1)
linear(x = 3:5, y_int = -1, slope = 1)
linear(x = 3:5, y_int = -1, slope = 0.01)


plot(
  x = birdhab$ls, 
  y = linear_simulator(
    x = birdhab$ls,
    y_int = int_obs,
    slope = slope_obs,
    st_dev = sd_obs
  ),
  main = "Simulated Data",
  xlab = "late-successional forest",
  ylab = "Brown Creeper Abundance")


plot(
  birdhab$ls, birdhab$BRCR, 
  xlab = "late-successional forest extent",
  ylab = "Brown Creeper abundance",
  pch = 19)

points(
  x = birdhab$ls, 
  y = linear_simulator(
    x = birdhab$ls,
    y_int = int_obs,
    slope = slope_obs,
    st_dev = sd_obs
  ),
  col = adjustcolor("red", alpha = 0.3),
  pch = 16)

legend(
  "topleft",
  legend = c("data", "simulation"),
  pch = 16,
  col = c(1, adjustcolor("red", alpha = 0.3)))

y_sim = linear_simulator(
  x = birdhab$ls,
  y_int = int_obs,
  slope = slope_obs,
  st_dev = sd_obs
)

fit_sim = lm(y_sim ~ birdhab$ls)
summary(fit_sim)

sum_1 = summary(fit_sim)
sum_1$coefficients

sum_1$coefficients[2, 4]


linear_sim_fit = function(x, slope, y_int, st_dev)
{
  y_sim = linear_simulator(
    x = x,
    y_int = y_int,
    slope = slope,
    st_dev = st_dev
  )
  fit_sim = lm(y_sim ~ x)
  return(fit_sim)
}


alpha = 0.05
n_sims = 1000
p_vals = numeric(n_sims)

n_effect_sizes = 20
effect_sizes_1 = seq(-.01, .01, length.out = n_effect_sizes)

effect_size_powers = numeric(n_effect_sizes)

for(j in 1:n_effect_sizes)
{
  for(i in 1:n_sims)
  {
    fit_sim = linear_sim_fit(
      x = birdhab$ls,
      y_int = int_obs,
      slope = effect_sizes_1[j],
      st_dev = sd_obs
    )
    
    p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
  }
  effect_size_powers[j] = sum(p_vals < alpha) / n_sims
}

sim_effect_size = 
  data.frame(
    effect_size = effect_sizes_1,
    power       = effect_size_powers)

plot(
  power ~ effect_size, data = sim_effect_size,
  type = 'l', xlab = 'Effect size', ylab = 'Power')
abline(v = slope_obs, lty = 2, col = 'red')

alpha = 0.05
n_sims = 30
p_vals = numeric(n_sims)

sample_sizes = seq(2, 20)
sample_size_powers = numeric(length(sample_sizes))

# The maximum x value in the simulation.
# Use the maximum observed x-value in the data
max_x = max(birdhab$ls)

for(j in 1:length(sample_sizes))
{
  # A sequence of equally-spaced x-values:
  x_vals = seq(0, max_x, length.out = sample_sizes[j])
  
  for(i in 1:n_sims)
  {
    fit_sim = linear_sim_fit(
      x = x_vals,
      y_int = int_obs,
      slope = slope_obs,
      st_dev = sd_obs
    )
    p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
  }
  sample_size_powers[j] = sum(p_vals < alpha) / n_sims
}


sim_sample_size = 
  data.frame(
    sample_size = sample_sizes,
    power       = sample_size_powers)

plot(
  power ~ sample_size, data = sim_sample_size,
  type = 'l', xlab = 'Sample size', ylab = 'Power')
abline(v = nrow(birdhab), lty = 2, col = 'red')
points(
  x = x_vals, 
  y = linear_simulator(
    x = x_vals,
    y_int = int_obs,
    slope = slope_obs,
    st_dev = sd_obs,
  col = adjustcolor("red", alpha = 0.3),
  pch = 16)
  )

############################################
fit_lowess_30 = loess(power ~ sample_size, data = sim_sample_size, span = 0.3)

newdata_sample_size = data.frame(sample_size = seq(2, 20, length.out = 30)) 

plot(
  x = newdata_sample_size$sample_size,
  y = predict(fit_lowess_30, newdata = newdata_sample_size),
  type = "l",
  ylab = "Statistical Power", xlab = "Sample Size", main= "Sample Size/Power Simulation LOWESS: 30%")
points(
  x=sim_sample_size$sample_size,
  y=sim_sample_size$power,
  col = adjustcolor("red", alpha = 0.3),
pch = 16)
legend("bottomright", legend= c("smoothed", "original"), pch=1)



require(here)
dat_dispersal= read.csv(here("data", "dispersal.csv"))

ricker_fun = function(x, a, b) 
{
  return(a * x * exp(-b * x))
}


plot(
  dat_dispersal$dist.class,
  dat_dispersal$disp.rate.ftb,
  xlim = c(0, 1500),
  xlab = "distance class", 
  ylab = "standardized dispersal rate", 
  main = "Julian's plot of marbled salamander first time breeders"
)


fit_ricker_nls = nls(
  disp.rate.ftb ~ ricker_fun(dist.class, a, b),
  data = dat_dispersal,
  start = list(b = 0, a = 1))
summary(fit_ricker_nls)

dist_newdata = data.frame(dist.class = seq(0, 1600, length.out = 1600)) 
lines(predict(fit_ricker_nls, newdata = dist_newdata))
legend("topright", legend = c("nls fit", "custom fit"), lty = c(1,2), col = c(1))
curve(ricker_fun(x, 1/210, 1/275), from = 0, to = 1500,
      add = TRUE, ylab = "f(x)", xlab = "x", lty=2)


dat_bird = read.csv(here("data", "bird.sta.csv"))
dat_habitat = read.csv(here("data", "hab.sta.csv"))
dat_all = merge(dat_bird, dat_habitat)

dat_all$HEWA_pres = dat_all$HEWA > 0

# Hermit warbler presence/absence
dat_all$GCKI_pres = dat_all$GCKI > 0

# Create model fits
fit_gcki_slope = glm(GCKI_pres ~ slope, data = dat_all, family = binomial)
fit_gcki_ba_tot = glm(GCKI_pres ~ ba.tot, data = dat_all, family = binomial)
fit_gcki_both_additive = glm(GCKI_pres ~ slope + ba.tot, data = dat_all, family = binomial)
fit_gcki_both_interactive = glm(GCKI_pres ~ slope * ba.tot, data = dat_all, family = binomial)

AIC(
  fit_GCKI_ba_tot,
  fit_GCKI_slope,
  fit_GCKI_both_additive,
  fit_GCKI_both_interactive)

summary(fit_GCKI_both_interactive)






n = 500

slope_newdata = data.frame(
  slope = seq(
    from = min(dat_all$slope, na.rm = T),
    to = max(dat_all$slope, na.rm = T),
    length.out = n
  )
)

ba_newdata = data.frame(ba.tot = seq(from = min(dat_all$ba.tot, na.rm = T),
                                    to = max(dat_all$ba.tot, na.rm = T),
                                    length.out = n))

slope_newdata$gcki_predicted = predict(fit_gcki_slope, newdata = slope_newdata, type = "response")

ba_newdata$gcki_predicted = predict(fit_gcki_ba_tot, newdata = ba_newdata, type = "response")


par(mfrow = c(2, 1))

# Presence/absence data, translucent points:
plot(
  GCKI_pres ~ slope, data = dat_all, yaxt= "n",
  main= "GCKI Presence/Absence vs Percent Slope",
  xlab = "Percent Slope",
  ylab = "",
  pch = 16, cex = 1, col = rgb(0,0,1, alpha= 0.05)
)

lines(gcki_predicted ~ slope, data = slope_newdata)
axis(2, at = c(0, 1), las= 1, labels= c("Absent", "Present"))

plot(
  GCKI_pres ~ ba.tot, data = dat_all, yaxt= "n",
  main="GCKI Presence/Absence vs Basal Area",
  xlab = "Basal Area",
  ylab = "",
  ylim= c(-0.25, 1.25),
  pch = 16, cex = 1, col = rgb(0,0,1, alpha= 0.05))

lines(gcki_predicted ~ ba.tot, data = ba_newdata)
axis(2, at = c(0, 1), las= 1, labels= c("Absent", "Present"))

n = 50

ba.tot = seq(
  from = min(dat_all$ba.tot, na.rm = T),
  to = max(dat_all$ba.tot, na.rm = T),
  length.out = n)
slope = seq(
  from = min(dat_all$slope, na.rm = T),
  to = max(dat_all$slope, na.rm = T),
  length.out = n)

new_dat_all = expand.grid(
  ba.tot = ba.tot,
  slope = slope)
head(new_dat_all)

new_dat_all$pred_add = predict(
  fit_gcki_both_additive,
  newdata = new_dat_all,
  type = "response")

new_dat_all$pred_int= predict(
  fit_gcki_both_interactive,
  newdata= new_dat_all,
  type= "response")

z_gcki_add = matrix(
  new_dat_all$pred_add,
  nrow = length(ba.tot),
  byrow = FALSE)
z_gcki_int = matrix(
  new_dat_all$pred_int,
  nrow = length(ba.tot),
  byrow = FALSE)

par(mfrow = c(1, 2))
contour(
  x = ba.tot, y = slope,
  z = z_gcki_add,
  xlab = "Total Basal Area",
  ylab = "Percent Slope",
  main = "Additive")
contour(
  x = ba.tot,
  y = slope,
  z = z_gcki_int,
  xlab = "Total Basal Area",
  ylab = "Percent Slope",
  main = "Interactive")






newdata_sample_size = data.frame(sample_size = seq(2, 20, length.out = 100)) 
plot(
  x = newdata_sample_size$sample_size,
  y = predict(fit_lowess_50, newdata = newdata_sample_size),
  type = "l",
  ylab = "Statistical Power", xlab = "Sample Size", main= "Sample Size/Power Simulation LOWESS: 50%")
points(
  x = sim_sample_size$sample_size,
  y = sim_sample_size$power
),
    col = adjustcolor("red", alpha = 0.3),
    pch = 16)


alpha = 0.01
n_sims = 50

p_vals = numeric(n_sims)

n_effect_sizes = 20
effect_sizes = seq(-.01, .01, length.out = n_effect_sizes)

# The maximum x value in the simulation.
# Use the maximum observed x-value in the data
max_x = max(birdhab$ls)

sample_sizes = seq(10, 50)

sim_output_2 = matrix(nrow = length(effect_sizes), ncol = length(sample_sizes))

for(k in 1:length(effect_sizes))
{
  effect_size = effect_sizes[k]
  for(j in 1:length(sample_sizes))
  {
    x_vals = seq(0, max_x, length.out = sample_sizes[j])
    
    for(i in 1:n_sims)
    {
      fit_sim = linear_sim_fit(
        x = x_vals,
        y_int = int_obs,
        slope = effect_size,
        st_dev = sd_obs
      )
      p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
    }
    sim_output_2[k, j] = sum(p_vals < alpha) / n_sims
  }
  print(paste0("computing effect size ", k," of ", length(effect_sizes)))
}

sim_n_effect_size = 
  list(
    power = sim_output_2,
    effect_size = effect_sizes,
    sample_size = sample_sizes
  )

image(
  sim_n_effect_size$power,
  xlab = "Effect size",
  ylab = "Sample Size",
  axes = FALSE)

# add x-axis labels
axis(
  1, 
  at = c(0, 0.5, 1), 
  labels = c(-.01, 0.0, .01))

# add y=axis labels
axis(
  2, 
  at = c(0, 1), 
  labels = c(sample_sizes[1], tail(sample_sizes, 1)))

contour(
  x = sim_n_effect_size$effect_size,
  y = sim_n_effect_size$sample_size,
  z = sim_n_effect_size$power,
  xlab = "effect size",
  ylab = "sample size",
  main = "Contour Plot of Statistical Power",
  levels = seq(0, 1, length.out = 9),
  drawlabels = TRUE,
  # method = "simple")
  method = "edge")

persp(
  x = sim_n_effect_size$effect_size,
  y = sim_n_effect_size$sample_size,
  z = sim_n_effect_size$power,
  xlab = "beta", ylab = "n", zlab = "power",
  col = 'lightblue',
  theta = 30, phi = 30, expand = .75,
  ticktype = 'detailed')

install.packages("rgl")



alpha = 0.05
n_sims = 1000
p_vals = numeric(n_sims)

# What was the observed standard deviation?
sd_obs

# specify the number of different standard deviation values to simulate:
n_sds = 20
pop_sds = seq(from = 0.01, to = 1.5, length.out = n_sds)

pop_sd_powers = numeric(n_sds)

for(j in 1:length(pop_sds))
{
 
  for(i in 1:n_sims)
  {
    fit_sim = linear_sim_fit( x = birdhab$ls,
                              y_int = int_obs,
                              slope = effect_sizes_1[j],
                              st_dev = sd_obs)
    p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
  }
  pop_sd_powers[j] = sum(p_vals < alpha) / n_sims
}

sim_output_dispersion = data.frame(
  sd = pop_sds,
  power = pop_sd_powers)

# You should save your simulation results so you don't have to run it every time.
save(
  sim_output_dispersion, 
  file = here::here("data", "lab_ll_dat_dispersion_sim.RData"))

# Line plot of standard deviation (x-axis) and statistical power (y-axis)
plot(power ~ sd, data = sim_output_dispersion,
     type = 'l', xlab = 'Dispersion', ylab = 'Power')

abline(v = sd_obs, lty = 2, col = 'red')

# Add a dotted vertical red line at the observed population standard deviation value.
abline(v = ...)


alpha = 0.05

# Start with a small number
n_sims = 1000
p_vals = numeric(n_sims)

# What was the observed standard deviation?
sd_obs

# specify the number of different standard deviation values to simulate:
# Start with a small number
n_sds = 20
pop_sds = seq(from = 0.05, to = , length.out = n_sds)

# The maximum x value in the simulation.
# Use the maximum observed x-value in the data
max_x = max(birdhab$ls)


pop_sd_powers = numeric(n_sds)

sample_sizes = seq(5, 100)

sim_output_3 = matrix(nrow = length(pop_sds), ncol = length(sample_sizes))

for(k in 1:length(pop_sds))
{
  pop_sd_k = pop_sds[k]
  
  for(j in 1:length(sample_sizes))
  {
    x_vals = seq(0, max_x, length.out = sample_sizes[j])
    
    for(i in 1:n_sims)
    {
      fit_sim = linear_sim_fit(
        x = x_vals,
        y_int = int_obs,
        slope = pop_sd_k,
        st_dev = sd_obs
      )
      p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
    }
    
    sim_output_3[k, j] = sum(p_vals < alpha) / n_sims
  }
  print(paste0("Testing standard deviation ", k, " of ", n_sds))
}

image(sim_output_3)

sim_3_dat = 
  list(
    power       = sim_output_3,
    sample_size = sample_sizes,
    pop_sd      = pop_sds)


# You should save your simulation results so you don't have to run it every time.
save(
  sim_3_dat, 
  file = here::here("data", "lab_ll_sim_output_dispersion_n_1000.RData"))

contour(
  x = sim_3_dat$pop_sd,
  y = sim_n_effect_size$sample_size,
  z = sim_n_effect_size$power,
  xlab = "dispersion",
  ylab = "sample size",
  main = "Contour Plot of Statistical Power",
  levels = seq(0, 1, length.out = 9),
  drawlabels = TRUE,
  # method = "simple")
  method = "edge")
require(rgl)
persp_plot= persp(
  x = sim_3_dat$pop_sd,
  y = sim_n_effect_size$sample_size,
  z = sim_n_effect_size$power,
  xlab = "dispersion", ylab = "n", zlab = "power",
  col = 'lightblue',
  theta = 30, phi = 30, expand = .75,
  ticktype = 'detailed')

htmltools::save_html(persp_plot, file = "C:\Users\Owner\Documents\environmental_data\persp_plot.html")