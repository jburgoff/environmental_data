require(palmerpenguins)
penguin_dat= droplevels(subset(penguins, species != 'Gentoo'))
install.packages("simpleboot")
require(simpleboot)

adelie= subset(penguin_dat, species == 'Adelie')
chinstrap= subset(penguin_dat, species== 'Chinstrap')

pen_boot= two.boot(adelie$flipper_length_mm, chinstrap$flipper_length_mm, mean, R= 10000, na.rm= TRUE)
str(pen_boot)
difs_mean= pen_boot$t
hist(difs_mean, main= 'Histogram of 10000 bootstrap differences in mean penguin flipper length', xlab= 'Difference in mean flipper length of Adelie and Chinstrap penguins')
quantile(pen_boot$t, c(0.025, 0.975))
sd(pen_boot$t)
mean(pen_boot$t)
median(pen_boot$t)



pen_ecdf= ecdf(pen_boot$t)
1- pen_ecdf(-4.5)
pen_ecdf(-8)

veg<- read.csv("~/environmental_data/data/vegdata.csv")
dat_tree = droplevels(subset(veg, treatment %in% c("control", "clipped")))          
wilcox.test(pine ~ treatment, data = dat_tree, alternative = "less")

control= droplevels(subset(dat_tree, treatment == 'control'))
clipped= droplevels(subset(dat_tree, treatment == 'clipped'))
tree_boot = two.boot(clipped$pine, control$pine, mean, R= 10000, na.rm= TRUE)
install.packages("boot.ci")
library(boot)
boot.ci(tree_boot)

quantile(tree_boot$t, c(0.025, 0.975))
                        
dat_bird= bird.sub
dat_habitat= hab.sub
dat_all = merge(
  dat_bird, 
  dat_habitat,
  by = c("basin", "sub"))

head(dat_all[, c("b.sidi", "s.sidi")])

# Calculate the sample mean and sd:
b_sidi_mean = mean(dat_all$b.sidi, na.rm = TRUE)
b_sidi_sd   = sd(dat_all$b.sidi, na.rm = TRUE)

# Use the subset-by-name symbol ($) to create a 
# new column of z-standardized values.

dat_all$b.sidi.standardized = (dat_all$b.sidi - b_sidi_mean)/b_sidi_sd



# Calculate the sample mean and sd:
s_sidi_mean = mean(dat_all$s.sidi, na.rm = TRUE)
s_sidi_sd   = sd(dat_all$s.sidi, na.rm = TRUE)

# Use the subset-by-name symbol ($) to create a 
# new column of z-standardized values.

dat_all$s.sidi.standardized = (dat_all$s.sidi - s_sidi_mean)/s_sidi_sd



dat_1 = 
  subset(
    dat_all,
    select = c(b.sidi, s.sidi))

m = 10000 
result_mc = numeric(m)

for(i in 1:m)
{
  index_1 = sample(nrow(dat_1), replace = TRUE)
  index_2 = sample(nrow(dat_1), replace = TRUE)
  
  dat_resampled_i = 
    data.frame(
      b.sidi = dat_1$b.sidi[index_1],
      s.sidi = dat_1$s.sidi[index_2]
    )
  
  fit_resampled_i = lm(b.sidi ~ s.sidi, data = dat_resampled_i)
  slope_resampled_i = coef(fit_resampled_i)[2]
  
  print(slope_resampled_i)
  # ... your loop code ...  
  
  result_mc[i] = coef(fit_resampled_i)[2]
} 

fit_1 = lm(b.sidi ~ s.sidi, data = dat_all)
coef(fit_1)
slope_observed = coef(fit_1)[2]

hist(
  result_mc,
  main = "Julian's Null Distribution of Regression Slope",
  xlab = "Slope Parameter")
abline(v = slope_observed, lty = 2, col = "red", lwd = 2)

quantile(result_mc, c(.05))

set.seed(345)
index_1 = sample(nrow(dat_1), replace = TRUE)

dat_boot = dat_1[index_1, ]
head(dat_boot)

fit_bs1 = lm(b.sidi ~ s.sidi, data = dat_boot)

coef(fit_bs1)

m = 10000 
result_boot = numeric(m)
for(i in 1:m)
{
  index_1 = sample(nrow(dat_1), replace = TRUE)
  
  dat_boot = dat_1[index_1, ]
  fit_bs1 = lm(b.sidi ~ s.sidi, data = dat_boot)
  # ... your loop code ...  
  
  result_boot[i] = coef(fit_bs1)
} 

dboot= density(result_boot)
plot(
  density(result_mc),
  main = "Mike's Null Distribution Density Plot",
  xlab = "Slope Coefficient")
  lines(dboot, col = "blue", lwd = 2 )
  xlim = min(, c(max(dx$x, dy$x))),  # Min and Max X-axis limits
  ylim = c(min(dx$y, dy$y), c(max(dx$y, dy$y))))  # Min and Max Y-axis limits

        