require(here)
catrate = read.csv(here("data", "catrate.csv"))
head(catrate)

n_success = sum(catrate$success)
n_years = sum(catrate$years)
binom.test(
  x = n_success,
  n = n_years,
  p = 0.5)

late_fill_rate = 2/7
normal_fill_rate = 1 - late_fill_rate

binom.test(
  x = n_success,
  n = n_years,
  p = normal_fill_rate) 

binom.test(
  x = n_success,
  n = n_years,
  p = normal_fill_rate,
  alternative ='less')

veg = read.csv(here("data", "vegdata.csv"))
head(veg)

boxplot(pine ~ treatment, data = veg)

veg2 = droplevels(
  subset(
    veg,
    treatment %in% c('control','clipped')
  ))

# verify that treatment is factorized
veg2$treatment = factor(veg2$treatment)

var.test(
  pine ~ treatment,
  data = veg2)

shapiro.test(veg2$pine[veg2$treatment=="control"])

shapiro.test(veg2$pine[veg2$treatment=="clipped"])

install.packages("datarium")
require(datarium)
data("mice2")
head(mice2)

wilcox.test(mice2$before, mice2$after, paired = TRUE)


disp = read.csv(here("data", "dispersal.csv"))

plot(
  disp.rate.ftb ~ disp.rate.eb,
  data = disp,
  main = "Marbled Salamander Dispersal Rates",
  xlab = "Dispersal Rate\nFirst Time Breeders",
  ylab = "Dispersal Rate\nExperienced Breeders",
  pch = 21, col = 1, bg = "steelblue"
)

cor.test(
  disp$disp.rate.ftb,
  disp$disp.rate.eb,
  use='complete.obs')

cor.test(
  disp$disp.rate.ftb,
  disp$disp.rate.eb,
  use='complete.obs',
  method='spearman')

plot(
  ecdf(disp$disp.rate.ftb),
  verticals=TRUE,
  main = "Mike's Plot of Marbled Salamanders\nFirst-Time Breeders: ECDF")

plot(
  ecdf(disp$disp.rate.ftb),
  verticals=TRUE,
  main = "Mike's Plot of Marbled Salamanders\nFirst-Time and Experienced Breeders: ECDF")
plot(
  ecdf(disp$disp.rate.eb),
  verticals=TRUE,
  lty=3,
  add=TRUE)
legend(
  x = 0.4, y = 0.4,
  lty = c(1, 3),
  legend = c("first-time", "experienced"),
  title = "Breeder Class")

prop.test(
  x = c(4,16),
  n = c(40,250))

birds   = read.csv(here("data", "bird.sta.csv"))
hab     = read.csv(here("data", "hab.sta.csv"))
birdhab = merge(
  birds,
  hab, by=c("basin", "sub", "sta"))

# Create a contingency table for edge/interior and brown creeper presence/absence
table(
  birdhab$s.edge,
  birdhab$BRCR > 0)

br_creeper_table = table(
  birdhab$s.edge, 
  birdhab$BRCR > 0)[, 2:1]

br_creeper_table

chisq_creepers=chisq.test(br_creeper_table)

round(chisq_creepers$expected, 1)
chisq_creepers$observed

round(
  chisq_creepers$observed - chisq_creepers$expected,
  digits = 1)


require(palmerpenguins)
fit_species = 
  lm(
    formula = body_mass_g ~ species,
    data = penguins)
boxplot(body_mass_g ~ species,
        data = penguins, main= "Boxplot of body mass by species")
bartlett.test(body_mass_g ~ species,
              data = penguins)


fit_sex = 
  lm(
    formula = body_mass_g ~ sex,
    data = penguins)

boxplot(body_mass_g ~ sex,
        data = penguins, main= "Boxplot of body mass by sex")
bartlett.test(body_mass_g ~ sex,
              data = penguins)

Chin_fem=subset(pen_fem, species %in% c("Chinstrap"))
mean(Chin_fem$body_mass_g)
summary(fit_both)

boxplot(body_mass_g ~ sex:species,
        data = penguins, names= c("Adelie female", "Chinstrap female", "Gentoo female", "Adelie male", "Chinstrap male", "Gentoo male"), main= "Boxplot of body mass by species and sex")

dat_groups = aggregate(
  body_mass_g ~ species:sex,
  data = penguins,
  FUN = c)
str(dat_groups)

bartlett.test(dat_groups$body_mass_g)

dat_fl= read.csv(here("data", "trees_FL.csv"))
head(dat_fl)

barplot(dat_fl$ProbabilityofFailure)

counts_prob_class= table(dat_fl$ProbabilityofFailure)
barplot(counts_prob_class, xlab= "Probability of failure class", ylab= "Count", main= "Barplot of counts in probability of failure classes (1-4)")

counts_failure_class= table(dat_fl$Failure_Standardized)
barplot(counts_failure_class, xlab= "Failure class", ylab= "Count", main= "Barplot of counts in failure classes")

hist(dat_fl$DBH_in)

plot(dat_fl$HeighttoTop_ft ~ dat_fl$DBH_in, xlab= "DBH", ylab= "Tree height", main= "Scatterplot of DBH and tree height")

whole= subset(dat_fl, Failure_Standardized== "whole")
none= subset(dat_fl, Failure_Standardized== "none")

ks.test(whole$DBH_in, none$DBH_in)
cor.test(dat_fl$HeighttoTop_ft, dat_fl$DBH_in, method= 'spearman')

dat_fl$fail = factor(dat_fl$Failure_Standardized != "none")

levels(dat_fl$fail) = c("No Fail", "Fail")

fl_table_2 = table(
  dat_fl$ProbabilityofFailure,
  dat_fl$fail)
fl_table_2

chisq=chisq.test(fl_table_2)

round(
  chisq$observed - chisq$expected,
  digits = 1)